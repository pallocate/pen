package penTest.eco

import java.io.ByteArrayInputStream
import org.junit.jupiter.api.*
import pen.eco.types.IniReader

class KIniReaderTest
{
   val validInput =
   """
      [HEADER]
      header_string:foo
      header_int:1
      header_float:1.1
      [ITEM]
      item_string:bar
      [ITEM]
      item_string:baz
   """.toByteArray()

   val badInputNr1 =
   """
      [HEADER]
      header_float:>"'Â´|
   """.toByteArray()

   val badInputNr2 =
   """
      [HEADER
      :header_string:[ITEM][HEADER]]
      :
      [ITEM]
   """.toByteArray()

   data class TestSet ( var headerString : String = "",
                        var headerInt : Int = 0,
                        var headerFloat : Float = 0F,
                        var itemString : String = "")

   class TestReader : IniReader
   {
      override val HEADER_KEY                      = "HEADER"
      override val ITEM_KEY                        = "ITEM"

      val result = TestSet()

      override fun headerSection (map : HashMap<String, String>)
      {
         result.headerString = map.getOrElse("header_string", { "" })
         result.headerInt = map.getOrElse("header_int", { "0" }).toInt()
         result.headerFloat = map.getOrElse("header_float", { "0.0" }).toFloat()
      }

      override fun itemSection (map : HashMap<String, String>)
      {
         result.itemString = map.getOrElse("item_string", { "" })
      }
   }

   var testReader = TestReader()

   @BeforeEach
   fun init ()
   { testReader = TestReader() }

   @Test
   fun `Valid input` ()
   {
      val expected = TestSet( "foo", 1, 1.1F, "baz" )
      testReader.read(ByteArrayInputStream( validInput ))
      Assertions.assertEquals( expected, testReader.result )
   }

   @Nested
   inner class BadInput
   {
      @Test
      fun `Bad input nr 1` ()
      {
         testReader.read(ByteArrayInputStream( badInputNr1 ))
         Assertions.assertTrue( !testReader.read(ByteArrayInputStream( badInputNr1 )) ) // Should fail due to number parsing exception
      }

      @Test
      fun `Bad input nr 2` ()
      {
         val expected = TestSet()                                               // Should not result in any valid parsing
         testReader.read(ByteArrayInputStream( badInputNr2 ))
         Assertions.assertEquals( expected, testReader.result )
      }
   }
}
